diff --git a/ui/requirements.txt b/ui/requirements.txt
new file mode 100644
index 0000000..0b8e9d1
--- /dev/null
+++ b/ui/requirements.txt
@@ -0,0 +1,2 @@
+streamlit==1.37.0
+requests>=2.31.0
diff --git a/ui/budget_coach_app.py b/ui/budget_coach_app.py
new file mode 100644
index 0000000..8fb0f2d
--- /dev/null
+++ b/ui/budget_coach_app.py
@@ -0,0 +1,167 @@
+import os
+import json
+import time
+import requests
+import streamlit as st
+
+# --- Config (override via env vars if you port-forward to different ports) ---
+USERSVC = os.getenv("USERSERVICE_URI", "http://localhost:8081")
+MCPSVC  = os.getenv("MCP_SERVER_URI",  "http://localhost:8082")
+INSIGHT = os.getenv("INSIGHT_URI",     "http://localhost:8083")
+
+DEFAULT_ACCOUNT = os.getenv("DEMO_ACCOUNT", "1011226111")
+DEFAULT_WINDOW  = int(os.getenv("DEMO_WINDOW_DAYS", "30"))
+
st.set_page_config(page_title="PFA â€¢ Budget Coach", page_icon="ðŸ’¸", layout="centered")
+
st.title("ðŸ’¸ PFA â€” Budget Coach (Vertex Gemini)")
st.caption("Judge-friendly UI to demonstrate /budget/coach over the live microservices")
+
+with st.expander("Configuration", expanded=False):
+    USERSVC = st.text_input("Userservice URL", USERSVC)
+    MCPSVC  = st.text_input("MCP Server URL", MCPSVC)
+    INSIGHT = st.text_input("Insight Agent URL", INSIGHT)
+
colA, colB = st.columns([2,1])
+with colA:
+    account = st.text_input("Account ID", DEFAULT_ACCOUNT)
+with colB:
+    window_days = st.number_input("Window (days)", min_value=7, max_value=180, value=DEFAULT_WINDOW, step=1)
+
+run_btn = st.button("Generate Budget Plan", type="primary")
+
def _http_get(url, headers=None, timeout=20):
+    r = requests.get(url, headers=headers or {}, timeout=timeout)
+    r.raise_for_status()
+    return r
+
def _http_post(url, body, headers=None, timeout=120):
+    r = requests.post(url, json=body, headers=headers or {}, timeout=timeout)
+    r.raise_for_status()
+    return r
+
def login_and_get_jwt():
+    # BoA demo user
+    url = f"{USERSVC}/login?username=testuser&password=bankofanthos"
+    r = _http_get(url)
+    try:
+        obj = r.json()
+        return obj["token"]
+    except Exception:
+        raise RuntimeError(f"Login not JSON / missing token: {r.text[:300]}")
+
def fetch_transactions(jwt, acct, window):
+    url = f"{MCPSVC}/transactions/{acct}?window_days={window}"
+    r = _http_get(url, headers={"Authorization": f"Bearer {jwt}"})
+    return r.json()  # array
+
def call_budget_coach(transactions):
+    url = f"{INSIGHT}/budget/coach"
+    r = _http_post(url, {"transactions": transactions})
+    return r.json()
+
def render_result(result):
+    st.subheader("Summary")
+    st.write(result.get("summary", "â€”"))
+
+    buckets = result.get("budget_buckets", [])
+    if buckets:
+        import pandas as pd
+        df = pd.DataFrame(buckets)
+        st.subheader("Budget Buckets")
+        st.dataframe(df, use_container_width=True)
+        try:
+            st.bar_chart(df.set_index("name")[["pct"]])
+        except Exception:
+            pass
+
+    tips = result.get("tips", [])
+    if tips:
+        st.subheader("Tips")
+        for t in tips:
+            st.write(f"â€¢ {t}")
+
+if run_btn:
+    try:
+        with st.spinner("Authenticating..."):
+            jwt = login_and_get_jwt()
+        with st.spinner("Fetching transactions..."):
+            txns = fetch_transactions(jwt, account, window_days)
+        with st.spinner("Calling Budget Coach (Vertex Gemini)..."):
+            t0 = time.time()
+            result = call_budget_coach(txns)
+            t1 = time.time()
+        st.success(f"Done in {t1 - t0:.1f}s")
+        render_result(result)
+        with st.expander("Raw JSON", expanded=False):
+            st.code(json.dumps(result, indent=2))
+    except Exception as e:
+        st.error(f"Error: {e}")
+        st.stop()
+
st.caption("Flow: userservice â†’ mcp-server â†’ insight-agent (/budget/coach) â†’ Vertex AI Gemini")
diff --git a/Makefile b/Makefile
index 9b0ebad..e2a1c6a 100644
--- a/Makefile
+++ b/Makefile
@@ -170,3 +170,27 @@ budget-smoke: ## One-off pod that fetches txns via MCP and hits /budget/coach on
 chmod +x scripts/budget-smoke.sh
 ./scripts/budget-smoke.sh
 
+# ------------------------------------------------------------
+# UI helpers (local demo)
+# ------------------------------------------------------------
+.PHONY: pfw-usersvc pfw-mcp pfw-insight ui-demo
+
pfw-usersvc:
+kubectl -n default port-forward deploy/userservice 8081:8080
+
pfw-mcp:
+kubectl -n default port-forward deploy/mcp-server 8082:8080
+
pfw-insight:
+kubectl -n default port-forward svc/insight-agent 8083:80
+
+ui-demo:
+python3 -m venv .venv && . .venv/bin/activate && pip install -r ui/requirements.txt && streamlit run ui/budget_coach_app.py
diff --git a/README.md b/README.md
index 3f0c7a1..5b9fd85 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,35 @@
 # Personal Financial Advisor (PFA)
 
+## Budget Coach UI (Local Demo)
+
+This lightweight UI lets judges run the **Budget Coach** flow end-to-end using your live microservices:
+
+**Flow:** `userservice â†’ mcp-server â†’ insight-agent (/budget/coach) â†’ Vertex AI Gemini`
+
+### 1) Port-forward cluster services
+Open three terminals (or run in the background):
+
+```bash
+# userservice
+kubectl -n default port-forward deploy/userservice 8081:8080
+# mcp-server
+kubectl -n default port-forward deploy/mcp-server 8082:8080
+# insight-agent (Service on :80 â†’ Pod :8080)
+kubectl -n default port-forward svc/insight-agent 8083:80
+```
+
+### 2) Launch UI
+From repo root:
+```bash
+python3 -m venv .venv && source .venv/bin/activate
pip install -r ui/requirements.txt
streamlit run ui/budget_coach_app.py
```
+
+Open the Streamlit URL, set **Account ID** and **Window (days)** if needed, then click **Generate Budget Plan**.
+
+> Note: Weâ€™ve removed Cloud SQL from the quickstart description; current path uses MCP + Insight Agent with Vertex AI and IAM-integrated GKE/Artifact Registry.
+
+---
+
 (additional project docs continue belowâ€¦)
