apiVersion: v1
kind: Service
metadata:
  name: insight-agent
  labels:
    app: insight-agent
    application: bank-of-anthos
    tier: backend
    team: platform
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 8080
  selector:
    app: insight-agent
    application: bank-of-anthos
    tier: backend
    team: platform
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: insight-agent
  labels:
    app: insight-agent
    application: bank-of-anthos
    tier: backend
    team: platform
spec:
  replicas: 2
  selector:
    matchLabels:
      app: insight-agent
      application: bank-of-anthos
      tier: backend
      team: platform
  template:
    metadata:
      labels:
        app: insight-agent
        application: bank-of-anthos
        tier: backend
        team: platform
    spec:
      serviceAccountName: bank-of-anthos
      containers:
        - name: insight-agent
          image: us-central1-docker.pkg.dev/gke-hackathon-469600/bank-of-anthos-repo/insight-agent:vertex
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          env:
            # Vertex / DSQ routing
            - name: GOOGLE_CLOUD_PROJECT
              valueFrom:
                configMapKeyRef:
                  name: vertex-config
                  key: GOOGLE_CLOUD_PROJECT
            - name: VERTEX_LOCATION
              value: "global"                # Prefer global endpoint under DSQ
            - name: VERTEX_MODEL
              value: "gemini-2.5-pro"
            # DSQ-friendly generation controls (override per env as needed)
            - name: GENAI_CONCURRENCY
              value: "2"
            - name: GENAI_RPM
              value: "18"
            - name: GENAI_MAX_TOKENS
              value: "2048"
            - name: GENAI_THINK_TOKENS
              value: "1024"
            - name: MANAGEMENT_METRICS_EXPORT_STACKDRIVER_ENABLED
              value: "false"
          # Health probes match FastAPI route: /api/healthz
          readinessProbe:
            httpGet: { path: /api/healthz, port: 8080 }
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 6
          livenessProbe:
            httpGet: { path: /api/healthz, port: 8080 }
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 6
          resources:
            requests:
              cpu: "200m"
              memory: "512Mi"
            limits:
              cpu: "1"
              memory: "1Gi"
