# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Deployment Tests"
on:
  push:
    # run on pushes to master or release/*
    branches:
      - master
      - release/*
  pull_request:
    # run on pull requests targeting master
    branches:
      - master
jobs:
  cluster-setup:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v2
    - name: Setup Cluster
      run: |
        kind delete cluster 2>/dev/null
        kind create cluster
        kubectl get nodes
  smoke-tests:
    needs: cluster-setup
    runs-on: self-hosted
    strategy:
      matrix:
        profile: ["default", "latest-release"]
      fail-fast: true
    steps:
    - name: Deploy From Source
      if: ${{ matrix.profile != 'latest-release' }}
      run: |
        skaffold config set --global local-cluster true
        skaffold run --default-repo local \
                     --profile ${{ matrix.profile }} \
                     --namespace ${{ matrix.profile }}
    - name: Deploy Latest Release
      if: ${{ matrix.profile == 'latest-release' }}
      run: |
        kubectl apply -f kubernetes-manifests \
                      --namespace ${{ matrix.profile }}
    - name: Wait For Pods
      timeout-minutes: 20
      run: |
        set -x
        kubectl wait --for=condition=ready --timeout=500s pod/accounts-db-0 --namespace ${{ matrix.profile }}
        kubectl wait --for=condition=ready --timeout=500s pod/ledger-db-0 --namespace ${{ matrix.profile }}
        kubectl wait --for=condition=available --timeout=500s deployment/frontend --namespace ${{ matrix.profile }}
        kubectl wait --for=condition=available --timeout=500s deployment/contacts --namespace ${{ matrix.profile }}
        kubectl wait --for=condition=available --timeout=500s deployment/userservice --namespace ${{ matrix.profile }}
        kubectl wait --for=condition=available --timeout=500s deployment/ledgerwriter --namespace ${{ matrix.profile }}
        kubectl wait --for=condition=available --timeout=500s deployment/transactionhistory --namespace ${{ matrix.profile }}
        kubectl wait --for=condition=available --timeout=500s deployment/balancereader --namespace ${{ matrix.profile }}
        kubectl wait --for=condition=available --timeout=500s deployment/loadgenerator --namespace ${{ matrix.profile }}
    - name: Smoke Test
      timeout-minutes: 5
      run: |
        set -x
        # start fresh loadgenerator pod
        kubectl delete pod -l app=loadgenerator --namespace ${{ matrix.profile }}
        # wait for requests to come in
        REQUEST_COUNT="0"
        while [[ "$REQUEST_COUNT" -lt "100"  ]]; do
            sleep 5
            REQUEST_COUNT=$(kubectl logs -l app=loadgenerator --namespace ${{ matrix.profile }} | grep Aggregated | awk '{print $2}')
        done
        # ensure there are no errors hitting endpoints
        ERROR_COUNT=$(kubectl logs -l app=loadgenerator  --namespace ${{ matrix.profile }} | grep Aggregated | awk '{print $3}' | sed "s/[(][^)]*[)]//g")
        if [[ "$ERROR_COUNT" -gt "0" ]]; then
          exit 1
        fi
  ui-tests:
    needs: [cluster-setup, smoke-tests]
    runs-on: self-hosted
    steps:
    - name: Port Forward frontend
      run: |
        set -x
        port_forward() {
            # get name of frontend pod
            local frontend_pod=$(kubectl get pods -l=app=frontend -o=jsonpath='{.items[0].metadata.name}')
            kubectl port-forward $frontend_pod 3000:8080
        }
        port_forward &
    - name: Ping frontend
      run: |
          curl --silent --output /dev/null --show-error --fail localhost:3000
    - name: UI tests
      run: |
          docker run -t -v $PWD/.github/workflows/ui-tests:/e2e -w /e2e --network=host cypress/included:4.3.0
